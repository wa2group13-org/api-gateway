services:
  keycloak:
    image: keycloak/keycloak:24.0
    hostname: keycloak
    ports:
      - "127.0.0.1:9090:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - ./realm:/opt/keycloak/data/import
    command: start-dev --import-realm

  # Used to access hostnames from the host machine
  docker-hoster:
    image: dvdarias/docker-hoster:latest
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/hosts:/tmp/hosts

  cm:
    image: wa2group13/communication_manager:1.2.0
    ports:
      - "127.0.0.1:8083:8080"
    environment:
      APPLICATION_NAME: ${APPLICATION_NAME}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      REFRESH_TOKEN: ${REFRESH_TOKEN}
      server.error.include-message: always
      server.error.include-binding-errors: always
      SPRING_PROFILES_ACTIVE: prod,api-docs
      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:29092
      JWT_ISSUER_URI: http://keycloak:8080/realms/crm
      EUREKA_URI: http://eureka-server:8761/eureka
      spring.application.name: communication-manager
    depends_on:
      - kafka
      - keycloak
      - eureka-server

  crm:
    image: wa2group13/crm:latest
    ports:
      - "127.0.0.1:8081:8080"
    environment:
      debug: "true"
      POSTGRES_URL: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: crm
      POSTGRES_USERNAME: crm
      POSTGRES_PASSWORD: crm
      server.error.include-message: always
      server.error.include-binding-errors: always
      SPRING_PROFILES_ACTIVE: prod,api-docs
      BASE_URL: ${BASE_URL}/crm
      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      JWT_ISSUER_URI: http://keycloak:8080/realms/crm
      EUREKA_URI: http://eureka-server:8761/eureka
    depends_on:
      - postgres
      - kafka
      - keycloak
      - eureka-server

  document-store:
    image: wa2group13/document_store:latest
    ports:
      - "127.0.0.1:8082:8080"
    environment:
      POSTGRES_URL: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: document_store
      POSTGRES_USERNAME: document_store
      POSTGRES_PASSWORD: document_store
      server.error.include-message: always
      server.error.include-binding-errors: always
      SPRING_PROFILES_ACTIVE: prod,api-docs
      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      JWT_ISSUER_URI: http://keycloak:8080/realms/crm
      MULTIPART_MAX_FILE_SIZE: 10MB
      MULTIPART_MAX_REQUEST_SIZE: 10MB
      spring.servlet.multipart.enabled: "true"
      spring.http.multipart.enabled: "true"
      EUREKA_URI: http://eureka-server:8761/eureka
      spring.application.name: document-store
    depends_on:
      - postgres
      - kafka
      - keycloak
      - eureka-server

  crm-analytics:
    image: wa2group13/crm-analytics:latest
    ports:
      - "127.0.0.1:8084:8080"
    environment:
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: mydatabase
      MONGODB_USERNAME: mongo
      MONGODB_PASSWORD: mongo
      SPRING_PROFILES_ACTIVE: prod,api-docs
      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
      JWT_ISSUER_URI: http://keycloak:8080/realms/crm
      spring.docker.compose.enabled: "false"
      server.error.include-message: always
      server.error.include-binding-errors: always
      EUREKA_URI: http://eureka-server:8761/eureka
    depends_on:
      - mongodb
      - kafka
      - keycloak
      - eureka-server

  eureka-server:
    image: wa2group13/eureka-server:1.0.0
    ports:
      - "127.0.0.1:8761:8761"
    hostname: eureka-server

  mongodb:
    image: mongo:8.0
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mydatabase
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_ROOT_USERNAME: root
    volumes:
      - ./docker/mongo/setup.js:/docker-entrypoint-initdb.d/setup.js:ro

  postgres:
    image: postgres:16.2
    hostname: postgres
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_MULTIPLE_DB: crm,document_store
      POSTGRES_MULTIPLE_PASSWORD: crm,document_store
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      DEBEZIUM_DB: debezium
      DEBEZIUM_PASSWORD: debezium
    volumes:
      - ./init_scripts/init_database.sh:/docker-entrypoint-initdb.d/init_database.sh:ro
      - pg-data:/var/lib/postgresql/data

  kafka:
    image: bitnami/kafka:3.7
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami
      - ./init_scripts/run-init-kafka-topics.sh:/docker-entrypoint-initdb.d/run-init-kafka-topics.sh:ro
      - ./init_scripts/init-kafka-topics.sh:/init-kafka-topics.sh:ro
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_MESSAGE_MAX_BYTES: 10485760

  kafka-connect:
    image: quay.io/debezium/connect:3.0
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on: [ kafka, postgres ]
    ports:
      - "9000:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  # Create the configuration for the postgres connector.
  kafka-connect-init:
    image: alpine/curl:latest
    depends_on: [kafka-connect]
    volumes:
      - ./init_scripts/register-postgres.json:/register-postgres.json
    command: >
      -X POST -H "Content-Type: application/json" --data @register-postgres.json http://kafka-connect:8083/connectors

  kafka-ui:
    hostname: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "9010:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  pg-data:
  kafka-data:

